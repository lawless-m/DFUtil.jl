var documenterSearchIndex = {"docs":
[{"location":"#DFUtil.jl","page":"DFUtil.jl","title":"DFUtil.jl","text":"","category":"section"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"Documentation for DFUtil.jl","category":"page"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"sum_columns","category":"page"},{"location":"#DFUtil.sum_columns","page":"DFUtil.jl","title":"DFUtil.sum_columns","text":"sum_columns(df, group_by::Vector{String}=Vector{String}())\n\nsum the columns of the dataframe, optionally grouping by group_by\n\nArguments\n\ndf DataFrame to sum\ngroup_by Vector of String names of the columns to group by\nreplace_with by default DataFrames takes the column names and appends _function. Instead use this string.\n\n\n\n\n\n","category":"function"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"group_data_into_periods","category":"page"},{"location":"#DFUtil.group_data_into_periods","page":"DFUtil.jl","title":"DFUtil.group_data_into_periods","text":"group_data_into_periods(df::DataFrame, date_column::Union{Symbol, AbstractString}, period::Union{Symbol, AbstractString}; andgrpby = Vector{String}())\n\nUsing the given data_column, group the dataframe into periods.\n\nAll columns except the grouping ones *must* have methods for +\n\nArguments\n\ndf DataFrame to group\ndate_column the column to use as the grouping\nperiod Period to use, options are: :Qtr, :Month, :Year, :Week (or as strings)\nandgrpby optional keyword to use additional groupings\n\nExamples\n\n`group_data_into_periods(df, :SaleDate, :Week)`\n`group_data_into_periods(df, \"SaleDate\", :Year, \"BranchId\")`\n`group_data_into_periods(df, :SaleDate, \"Qtr\", [:Area, :BranchId)]`\n\n\n\n\n\n","category":"function"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"match_row","category":"page"},{"location":"#DFUtil.match_row","page":"DFUtil.jl","title":"DFUtil.match_row","text":"match_row(df, col, val) \n\nJust a shortcut for filter(row -> row[col] == val, df)\n\nNot even sure why I introduced it\t\n\n\n\n\n\n","category":"function"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"to_json","category":"page"},{"location":"#DFUtil.to_json","page":"DFUtil.jl","title":"DFUtil.to_json","text":"to_json(io::IO, data::DataFrame, keys::Union{AbstractString, Vector{AbstractString}})\n\nOutput the dataframe to Json, grouping by the given keys\n\n`{ \"row[keys[1]]\" : { \"row[keys[2]]\" : { \"names(row)[1]\" : \"row[names(row[1])]\", \"names(row)[2]\" : \"row[names(row[2])]\", ..., \"names(row)[end]\" : \"row[names(row[end])]\"}}}`\n\nArguments\n\nio IO handle to write to\ndf DataFrame to write\nkeys Keys to lift outside the object\n\n\n\n\n\n","category":"function"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"to_json_var","category":"page"},{"location":"#DFUtil.to_json_var","page":"DFUtil.jl","title":"DFUtil.to_json_var","text":"to_json_var(io::IO, df::DataFrame, keys::Union{AbstractString, Vector{AbstractString}}, var=\"object\")\n\nOutput the dataframe to json using to_json but wrap it inside a Javascript JSON.parse() for direct use in Javascript\n\nArguments\n\nio IO handle to write to\ndf DataFrame to write\nkeys Keys to lift outside the object - see to_json for explanation of that\nvar JavaScript object name it will be assign to with var $var = ....\n\n\n\n\n\n","category":"function"}]
}
