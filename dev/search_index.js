var documenterSearchIndex = {"docs":
[{"location":"#DFUtil.jl","page":"DFUtil.jl","title":"DFUtil.jl","text":"","category":"section"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"Documentation for DFUtil.jl","category":"page"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"sum_columns","category":"page"},{"location":"#DFUtil.sum_columns","page":"DFUtil.jl","title":"DFUtil.sum_columns","text":"sum_columns(df, group_by::Vector{String}=Vector{String}())\n\nsum the columns of the dataframe, optionally grouping by group_by all the columns not in the grouping must have a + method\n\nArguments\n\ndf DataFrame to sum\ngroup_by Vector of String names of the columns to group by\nreplace_with by default DataFrames takes the column names and appends _function. Instead use this string.\n\n\n\n\n\n","category":"function"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"group_data_into_periods","category":"page"},{"location":"#DFUtil.group_data_into_periods","page":"DFUtil.jl","title":"DFUtil.group_data_into_periods","text":"group_data_into_periods(df::DataFrame, date_column::Union{Symbol, AbstractString}, period::Union{Symbol, AbstractString}; andgrpby = Vector{String}())\n\nUsing the given data_column, group the dataframe into periods.\n\nAll columns except the grouping ones must have methods for +\n\nArguments\n\ndf DataFrame to group\ndate_column the column to use as the grouping\nperiod Period to use, options are: :Qtr, :Month, :Year, :Week (or as strings)\nandgrpby optional keyword to use additional groupings\n\nExamples\n\ngroup_data_into_periods(df, :SaleDate, :Week)\ngroup_data_into_periods(df, \"SaleDate\", :Year, \"BranchId\")\ngroup_data_into_periods(df, :SaleDate, \"Qtr\", [:Area, :BranchId)]\n\n\n\n\n\n","category":"function"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"pQtr","category":"page"},{"location":"#DFUtil.pQtr","page":"DFUtil.jl","title":"DFUtil.pQtr","text":"pQtr(dt)\n\nturn a Date / Datetime into its eqivalent YearQn representation e.g. 2001Q1\n\n\n\n\n\n","category":"function"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"pWeek","category":"page"},{"location":"#DFUtil.pWeek","page":"DFUtil.jl","title":"DFUtil.pWeek","text":"pWeek(dt)\n\nTurn a Date / Datetime into its eqivalent YearWeek representation e.g. 2001-01 Preserves 2000-01-01 becoming 1999-52\n\n\n\n\n\n","category":"function"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"pYear","category":"page"},{"location":"#DFUtil.pYear","page":"DFUtil.jl","title":"DFUtil.pYear","text":"pYear(dt)\n\nturn a Date / Datetime into its eqivalent Year representation e.g. 2001\n\n\n\n\n\n","category":"function"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"pMonth","category":"page"},{"location":"#DFUtil.pMonth","page":"DFUtil.jl","title":"DFUtil.pMonth","text":"pMonth(dt)\n\nturn a Date / Datetime into its eqivalent YearMonth representation e.g. 2001-01\n\n\n\n\n\n","category":"function"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"match_row","category":"page"},{"location":"#DFUtil.match_row","page":"DFUtil.jl","title":"DFUtil.match_row","text":"match_row(df, col, val)\n\nJust a shortcut for filter(row -> row[col] == val, df)\n\n\n\n\n\n","category":"function"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"to_json","category":"page"},{"location":"#DFUtil.to_json","page":"DFUtil.jl","title":"DFUtil.to_json","text":"to_json(io::IO, data::DataFrame, keys::Union{AbstractString, Vector{AbstractString}})\n\nOutput the dataframe to Json, grouping by the given keys\n\n{ \"row[keys[1]]\" : { \"row[keys[2]]\" : { \"names(row)[1]\" : \"row[names(row[1])]\", \"names(row)[2]\" : \"row[names(row[2])]\", ..., \"names(row)[end]\" : \"row[names(row[end])]\"}}}\n\nArguments\n\nio IO handle to write to\ndf DataFrame to write\nkeys Keys to lift outside the object\n\nExamples\n\ndf = DataFrame([[1,2],[3,4],[4,5]],[\"a\", \"b\", \"c\"]), \"a\")\n\nto_json(stdout, df, \"a\")\n\n\"{ \"1\" : {\"a\" : \"1\", \"b\" : \"3\", \"c\" : \"4\" } , \"2\" : {\"a\" : \"2\", \"b\" : \"4\", \"c\" : \"5\" }  }\"\n\nto_json(stdout, df, [\"a\", \"b\"])\n\n\"{ \"1\" : {\"3\" : {\"a\" : \"1\", \"b\" : \"3\", \"c\" : \"4\" }  }, \"2\" : {\"4\" : {\"a\" : \"2\", \"b\" : \"4\", \"c\" : \"5\" }  } }\")\n\n\n\n\n\n","category":"function"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"to_json_var","category":"page"},{"location":"#DFUtil.to_json_var","page":"DFUtil.jl","title":"DFUtil.to_json_var","text":"to_json_var(io::IO, df::DataFrame, keys::Union{AbstractString, Vector{AbstractString}}, var=\"object\")\n\nOutput the dataframe to json using to_json but wrap it inside a Javascript JSON.parse() for direct use in Javascript\n\nArguments\n\nio IO handle to write to\ndf DataFrame to write\nkeys Keys to lift outside the object - see to_json for explanation of that\nvar JavaScript object name it will be assign to with var $var = ....\n\nExamples\n\ndf = DataFrame([[1,2],[3,4],[4,5]],[\"a\", \"b\", \"c\"]), \"a\")\n\nto_json_var(stdout, df, \"a\", \"object\")\n\n\"var object=JSON.parse('{ \"1\" : {\"a\" : \"1\", \"b\" : \"3\", \"c\" : \"4\" } , \"2\" : {\"a\" : \"2\", \"b\" : \"4\", \"c\" : \"5\" }  }');\"\n\n\n\n\n\n","category":"function"},{"location":"","page":"DFUtil.jl","title":"DFUtil.jl","text":"include_or_exclude","category":"page"},{"location":"#DFUtil.include_or_exclude","page":"DFUtil.jl","title":"DFUtil.include_or_exclude","text":"include_or_exclude(df, includes, excludes)\n\nGiven a DataFrame either restrict it to the includes list, or remove the exludes list\n\nSounds a bit daft but it is to provide KW options in functions\n\nIf both are given, the includes take priority\n\nArguments\n\ndf the DataFrame\nincludes the String, Symbol or list of those to include\nexcludes the String, Symbol or list of those to exclude\n\nExamples\n\ndf = DataFrame([[1,2,3], [10,20,30]], [\"a\", \"b\"])\n\ninclude_or_exclude(df, includes=\"a\")\n\njulia> include_or_exclude(df, includes=[\"a\"])\n3×1 DataFrame\nRow │ a\n\t│ Int64\n─────┼───────\n1 │     1\n2 │     2\n3 │     3\n\n\njulia> include_or_exclude(df, excludes=\"a\")\n3×1 DataFrame\nRow │ b\n\t│ Int64\n─────┼───────\n1 │    10\n2 │    20\n3 │    30\n\n\njulia> include_or_exclude(df, includes=[\"a\"], excludes=[\"a\", \"b\"])\n3×1 DataFrame\nRow │ a\n\t│ Int64\n─────┼───────\n1 │     1\n2 │     2\n3 │     3\n\n\n\n\n\n","category":"function"}]
}
